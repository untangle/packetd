#!/bin/sh

NFT=${NFT:-nft}
QUEUE_PRIORITY="-145"
MANGLE_PRIORITY="-145"
TABLE_NAME="packetd"
TABLE_NAT_NAME="nat"

remove_packetd_rules()
{
    ${NFT} flush chain inet ${TABLE_NAME} packetd-prerouting 2>/dev/null
    ${NFT} flush chain inet ${TABLE_NAME} packetd-input 2>/dev/null
    ${NFT} flush chain inet ${TABLE_NAME} packetd-output 2>/dev/null
    ${NFT} flush chain inet ${TABLE_NAME} packetd-queue 2>/dev/null
    ${NFT} flush chain ip ${TABLE_NAT_NAME} prerouting 2>/dev/null
    ${NFT} flush chain ip ${TABLE_NAT_NAME} postrouting 2>/dev/null
    ${NFT} delete chain inet ${TABLE_NAME} packetd-prerouting 2>/dev/null
    ${NFT} delete chain inet ${TABLE_NAME} packetd-input 2>/dev/null
    ${NFT} delete chain inet ${TABLE_NAME} packetd-output 2>/dev/null
    ${NFT} delete chain inet ${TABLE_NAME} packetd-queue 2>/dev/null
    ${NFT} delete set ip ${TABLE_NAT_NAME} tp_redirect 2>/dev/null
    ${NFT} delete table inet ${TABLE_NAME} 2>/dev/null
    ${NFT} delete table ip ${TABLE_NAT_NAME}
}

insert_packetd_rules()
{
    # create the tables if needed
    ${NFT} add table inet ${TABLE_NAME}

    # create threatprevention nat table, chains and set
    ${NFT} add table ip ${TABLE_NAT_NAME}
    ${NFT} add chain nat prerouting "{type nat hook prerouting priority -100;}"
    ${NFT} add chain nat postrouting "{type nat hook postrouting priority 100 ;}"
    ${NFT} add set ip ${TABLE_NAT_NAME} tp_redirect "{ type ct_id ; }"
    
    # create chains
    ${NFT} add chain inet ${TABLE_NAME} packetd-prerouting "{ type filter hook prerouting priority $QUEUE_PRIORITY ; }"
    ${NFT} flush chain inet ${TABLE_NAME} packetd-prerouting
    ${NFT} add chain inet ${TABLE_NAME} packetd-output "{ type filter hook output priority $MANGLE_PRIORITY ; }"
    ${NFT} flush chain inet ${TABLE_NAME} packetd-output
    ${NFT} add chain inet ${TABLE_NAME} packetd-input "{ type filter hook input priority $MANGLE_PRIORITY ; }"
    ${NFT} flush chain inet ${TABLE_NAME} packetd-input
    ${NFT} add chain inet ${TABLE_NAME} packetd-queue
    ${NFT} flush chain inet ${TABLE_NAME} packetd-queue

    # Set bypass bit on all local-outbound sessions
    ${NFT} add rule inet ${TABLE_NAME} packetd-output ct state new ct mark set ct mark or 0x80000000
    ${NFT} add rule inet ${TABLE_NAME} packetd-output goto packetd-queue

    # Set bypass bit on all local-inbound sessions (except DNS)
    ${NFT} add rule inet ${TABLE_NAME} packetd-input udp dport 53 return
    ${NFT} add rule inet ${TABLE_NAME} packetd-input tcp dport 53 return
    ${NFT} add rule inet ${TABLE_NAME} packetd-input ct state new ct mark set ct mark or 0x80000000

    # Catch packets in prerouting
    ${NFT} add rule inet ${TABLE_NAME} packetd-prerouting goto packetd-queue

    # Don't catch bypassed traffic
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue dict sessions ct id bypass_packetd bool true counter return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ct mark and 0x80000000 == 0x80000000 counter return

    # Redirect threatprevention traffic to our block page.
    ${NFT} add rule ${TABLE_NAT_NAME} prerouting ct id @tp_redirect tcp dport 80 dnat 127.0.0.1:8485
    ${NFT} add rule ${TABLE_NAT_NAME} prerouting ct id @tp_redirect tcp dport 443 dnat 127.0.0.1:8486

   # In case we are quickly reusing a conntrack id, flush the sessions dictionary on new connections
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ct state new counter dict sessions ct id flush

    # Don't catch loopback traffic
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ip saddr 127.0.0.1/8 return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ip daddr 127.0.0.1/8 return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ip6 saddr ::1 return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ip6 daddr ::1 return

    # Don't catch development network if defined
    if [ "${PACKETD_DEVNET}" != "" ] ; then
        ${NFT} add rule inet ${TABLE_NAME} packetd-queue ip saddr ${PACKETD_DEVNET} return
        ${NFT} add rule inet ${TABLE_NAME} packetd-queue ip daddr ${PACKETD_DEVNET} return
    fi

    # Do not queue invalid or untracked packets
    # These will not have a valid conntrack ID so there is nothing for packetd to attach metadata to
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ct state { invalid, untracked } return


    # Only catch unicast traffic
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue fib saddr type { anycast, broadcast, multicast } counter return
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue fib daddr type { anycast, broadcast, multicast } counter return

    # Don't catch deep-sessions
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ct packets \> 256 counter return

    # Set the new packet mark
    # We must actually set this mark so that packetd can tell this is a "new" packet
    # If it tries to predict if its a new packet based on the tuple and/or the conntrack ID it will sometimes fail
    # This happens when a "new" packet gets dropped before conntrack confirmation. In this case a subsequent packet
    # that may have the same tuple, and actually may get exactly the same semi-random conntrack ID.
    # To packetd this will look like a second packet, but netfilter considers this a new packet.
    # The only reliable way to let packetd know this is a new packet is by setting the mark before queueing
    ${NFT} add rule inet ${TABLE_NAME} packetd-queue ct state new mark set "mark|0x10000000"

    # Queue the traffic using fanout only if the start and end values are different
    # Note the positional arguments are those passed to this function
    if [ "$1" = "$2" ] ; then
        ${NFT} add rule inet ${TABLE_NAME} packetd-queue counter queue num "$1" bypass
    else
        ${NFT} add rule inet ${TABLE_NAME} packetd-queue counter queue num "$1"-"$2" fanout,bypass
    fi
}

##### Start of script

## make sure we are called as root
USERVAL=`id -u`
if [ ${USERVAL} -ne 0 ] ; then
    printf "\n  ERROR: You must be root to run this script\n\n"
    exit 1
fi

## source the configuration file if available
if [ -f /etc/default/untangle-packetd ]; then
    . /etc/default/untangle-packetd
fi

## make sure the first argument is something
if [ -z $1 ] ; then
    echo "Missing INSERT or REMOVE directive"
    exit 2
fi

## check for and handle remove
if [ "$1" = "REMOVE" ] ; then
    remove_packetd_rules
    echo "The packetd netfilter rules have been removed"
    exit 0
fi

## not remove so only insert is valid
if [ "$1" != "INSERT" ] ; then
    echo "The first argument must be INSERT or REMOVE"
    exit 3
fi

## check for the queue range start
if [ "$2" = "" ] ; then
    echo "The queue range start value is missing"
    exit 4
fi

## check for the queue range end
if [ "$3" = "" ] ; then
    echo "The queue range end value is missing"
    exit 5
fi

## allow passing test as the final argument to see the rules
if [ "$4" = "test" ] ; then
    NFT=echo
fi

## everything looks good so handle the insert
insert_packetd_rules $2 $3
echo "The packetd netfilter rules have been inserted"
